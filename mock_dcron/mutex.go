// Code generated by MockGen. DO NOT EDIT.
// Source: mutex.go

// Package mock_dcron is a generated GoMock package.
package mock_dcron

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMutex is a mock of Mutex interface
type MockMutex struct {
	ctrl     *gomock.Controller
	recorder *MockMutexMockRecorder
}

// MockMutexMockRecorder is the mock recorder for MockMutex
type MockMutexMockRecorder struct {
	mock *MockMutex
}

// NewMockMutex creates a new mock instance
func NewMockMutex(ctrl *gomock.Controller) *MockMutex {
	mock := &MockMutex{ctrl: ctrl}
	mock.recorder = &MockMutexMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMutex) EXPECT() *MockMutexMockRecorder {
	return m.recorder
}

// SetIfNotExists mocks base method
func (m *MockMutex) SetIfNotExists(key, value string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIfNotExists", key, value)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SetIfNotExists indicates an expected call of SetIfNotExists
func (mr *MockMutexMockRecorder) SetIfNotExists(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIfNotExists", reflect.TypeOf((*MockMutex)(nil).SetIfNotExists), key, value)
}
